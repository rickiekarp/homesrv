//import com.github.spotbugs.SpotBugsTask

buildscript {
    apply from: 'module-base/base.gradle'

    repositories {
        mavenCentral()
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion" as Object
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion" as Object
//        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.1"
    }
}

group = 'com.rkarp.backend'
version = '1.0.0'

allprojects {

    ext {
        log4jVersion = '2.11.1'
        guavaVersion = '26.0-jre'

        gsonVersion = '2.8.5'

        flywayVersion = '5.2.1'

        //foundation
        jacksonVersion = '2.9.6'

        springBootVersion = '2.1.0.RELEASE'
    }

    apply plugin: "java"
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: 'org.jetbrains.dokka'

    sourceCompatibility = JavaVersion.VERSION_1_10
    targetCompatibility = JavaVersion.VERSION_1_10

    repositories {
        mavenCentral()
    }
}

subprojects {
    dependencies {
        testCompile group: 'junit', name: 'junit', version: junit4Version
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion" as Object
        compile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion" as Object
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion" as Object

        compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.13'
        compile group: 'org.flywaydb', name: 'flyway-core', version: project.ext.flywayVersion

        compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
    }

//    project.apply plugin: "com.github.spotbugs"
//    project.spotbugs {
//        it.sourceSets = [sourceSets.main]
//        ignoreFailures = true
//        toolVersion = '3.1.3'
//        effort = 'max'
//        reportLevel = "high"
//        reportsDir = file("$project.rootDir.absolutePath/Reports/spotbugs/$project.name")
//    }
//
//    // filter out any class that does not live in the rkarp package
//    project.tasks.withType(SpotBugsTask) {
//        description = 'Run spotbugs'
//        group = 'verification'
//
//        dependsOn 'classes'
//        classes = fileTree('build/classes/')
//
//        doFirst {
//            classes = classes.filter {
//                it.path.contains('/com/rkarp/')
//            }
//            pluginClasspath = project.configurations.spotbugsPlugins
//        }
//    }

    dokka {
        outputFormat = 'html'
        outputDirectory = "$it.project.buildDir/dokka"
    }
}

wrapper {
    gradleVersion = gradleWrapperVersion
}
